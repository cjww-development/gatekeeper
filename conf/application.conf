appName = "gatekeeper"

logging.coloured = true

play {
  i18n {
    langs = ["en"]
  }

  application {
    loader = "play.api.inject.guice.GuiceApplicationLoader"
  }

  modules {
    enabled += "global.ServiceBindings"
    enabled += "com.cjwwdev.modules.FeatureBindings"
  }

  filters {
    enabled  += "filters.DefaultShutteringFilter"
    enabled  += "filters.DefaultRequestLoggingFilter"
    disabled += "play.filters.hosts.AllowedHostsFilter"
  }

  http {
    router = "root.Routes"
    secret {
      key = "7d5c75d3bc274838a906fb8a3c6ed0a3"
      key = ${?APP_SECRET}
    }
    errorHandler = "global.ErrorHandler"
  }

  assets {
    path = "/public"
    urlPrefix = "/assets"
  }
}

database {
  IndividualUserStore {
    uri = "mongodb://localhost:27017"
    uri = ${?MONGO_URI}
    database = "gatekeeper"
    collection = "users"
  }

  OrganisationUserStore {
    uri = "mongodb://localhost:27017"
    uri = ${?MONGO_URI}
    database = "gatekeeper"
    collection = "org-users"
  }

  DefaultAppStore {
    uri = "mongodb://localhost:27017"
    uri = ${?MONGO_URI}
    database = "gatekeeper"
    collection = "registered-apps"
  }

  DefaultGrantStore {
    uri = "mongodb://localhost:27017"
    uri = ${?MONGO_URI}
    database = "gatekeeper"
    collection = "grants"
  }

  DefaultLoginAttemptStore {
    uri = "mongodb://localhost:27017"
    uri = ${?MONGO_URI}
    database = "gatekeeper"
    collection = "login-attempts"
  }

  DefaultTokenRecordStore {
    uri = "mongodb://localhost:27017"
    uri = ${?MONGO_URI}
    database = "gatekeeper"
    collection = "token-records"
  }

  DefaultVerificationStore {
    uri = "mongodb://localhost:27017"
    uri = ${?MONGO_URI}
    database = "gatekeeper"
    collection = "verifications"
  }

  DefaultJwksStore {
    uri = "mongodb://localhost:27017"
    uri = ${?MONGO_URI}
    database = "gatekeeper"
    collection = "jwks"
  }
}

data-defender {
  default.key = "local-default-key"
  default.key = ${?ENC_KEY}
}

auth-request {
  expire-after = 60000 #millis (currently 60 seconds)
}

login-attempt {
  expire-after = 60000 #millis (currently 60 seconds)
}

verifications {
  expire-after = 24 #hours
}

jwt {
  iss = "http://localhost:5678/gatekeeper"
  iss = ${?WKC_ISSUER}
  expiry = 900 #seconds (currently 15 minutes)
  signature = "local-signing-key"
  signature = ${?JWT_SIG}
}

well-known-config {
  issuer = "http://localhost:5678/gatekeeper"
  issuer = ${?WKC_ISSUER}
  grant-types = ["authorization_code", "client_credentials", "refresh_token"]
  scopes = ["openid", "profile", "email", "address", "phone"]
  response-types = ["code"]
  token-auth-method = ["client_secret_basic", "client_secret_post"]
  id-token-algs = ["RS256"]
}

valid-scopes = [
  {
    name = "openid"
    readable-name = "Identification (OpenId)"
    desc = "This app would like to identity you and potentially keep you logged in"
  },
  {
    name = "profile"
    readable-name = "Profile"
    desc = "This app would like to access your user profile"
  },
  {
    name = "email"
    readable-name = "Email address"
    desc = "This app would like to know your email address and see if it has been verified"
  },
  {
    name = "address"
    readable-name = "Address"
    desc = "This app would like to know your home address"
  },
  {
    name = "phone"
    readable-name = "Phone number"
    desc = "This app would like to know your phone number and see if it has been verified"
  }
]

mfa {
  totp {
    issuer = "CJWW Hub (dev)"
    issuer = ${?MFA_ISSUER}
    digits = 6
    period = 30
  }
}

email {
  from = "test@email.com"
  from = ${?EMAIL_FROM}
  verification-subject = "Verifying your account"
}

sms {
  max-price = "0.50"

  verification {
    sender-id = "CJWWVerify"
    sender-id = ${?SMS_SENDER_ID}
    message = "Your verification code is <replace>"
    type = "Transactional"
  }
}
